<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>塩の惑星</title>
    <link href="https://corkborg.github.io/feed.xml" rel="self" />
    <link href="https://corkborg.github.io" />
    <updated>2025-09-28T00:06:42+09:00</updated>
    <author>
        <name>ミズソバ</name>
    </author>
    <id>https://corkborg.github.io</id>

    <entry>
        <title>CapCut Proの領収書を手にれる方法</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/capcut-pronoling-shou-shu-woshou-nirerufang-fa/"/>
        <id>https://corkborg.github.io/capcut-pronoling-shou-shu-woshou-nirerufang-fa/</id>
        <media:content url="https://corkborg.github.io/media/posts/65/sukurinsiyotuto-2025-09-26-20.18.38.png" medium="image" />

        <updated>2025-09-26T20:15:54+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/65/sukurinsiyotuto-2025-09-26-20.18.38.png" alt="CapCut編集画面" />
                    TikTokでのショート動画製作といえばBydeDance公式のCapCutですよね。CapCutでは有料版が存在し、そちらでしか使えない素材や機能が多数あります。 昨今、TikTokを活用した副業等も流行っていると思うのですが税金などの処理に必要なCapCut Proの領収書を手に入れるれる方法はあまり知られていません。 そこで今回はCapCutの領収書を手にれる方法を紹介します。 TikTokのアカウント名が領収書の宛名になるのでアカウント名を領収書の宛名と同じにしておいたほう便利かもしれません。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/65/sukurinsiyotuto-2025-09-26-20.18.38.png" class="type:primaryImage" alt="CapCut編集画面" /></p>
                <p>TikTokでのショート動画製作といえばBydeDance公式のCapCutですよね。CapCutでは有料版が存在し、そちらでしか使えない素材や機能が多数あります。</p>
<p>昨今、TikTokを活用した副業等も流行っていると思うのですが税金などの処理に必要なCapCut Proの領収書を手に入れるれる方法はあまり知られていません。</p>
<p>そこで今回はCapCutの領収書を手にれる方法を紹介します。</p>
<h2>CapCut購入前に</h2>
<p>TikTokのアカウント名が領収書の宛名になるのでアカウント名を領収書の宛名と同じにしておいたほう便利かもしれません。</p>
<p>とは言え宛名を公開したくない場合が多いと思います。その場合メインのTikTokアカウントと分けてプライベートアカウントを作成するかしたほうが良いです。</p>
<p>どうしても、アカウント名を変更できない場合、CapCutに問い合わせて領収書の宛名を変更してもらうことがきでます。その場合、メールでのやり取りが必要です。</p>
<h2>CapCutの領収書を手に入れる方法</h2>
<p>領収書まわりの設定はCapCutのデスクトップ版のみで行えます。</p>
<p>なので、デスクトップ版をインストールして起動してログインします。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/65/CapCutHua-Mian.jpg" alt="CapCut起動画面" width="801" height="515" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/65/responsive/CapCutHua-Mian-xs.jpg 300w ,https://corkborg.github.io/media/posts/65/responsive/CapCutHua-Mian-sm.jpg 480w ,https://corkborg.github.io/media/posts/65/responsive/CapCutHua-Mian-md.jpg 749w ,https://corkborg.github.io/media/posts/65/responsive/CapCutHua-Mian-xl.jpg 1200w"></figure>
<p>起動画面の右上の方にアカウント情報が載っていると思います。そこの「詳細を見る」をクリックします。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/65/sukurinsiyotuto-2025-09-26-19.38.43-2.png" alt="CapCut支払い管理画面" width="378" height="620" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/65/responsive/sukurinsiyotuto-2025-09-26-19.38.43-2-xs.png 300w ,https://corkborg.github.io/media/posts/65/responsive/sukurinsiyotuto-2025-09-26-19.38.43-2-sm.png 480w ,https://corkborg.github.io/media/posts/65/responsive/sukurinsiyotuto-2025-09-26-19.38.43-2-md.png 749w ,https://corkborg.github.io/media/posts/65/responsive/sukurinsiyotuto-2025-09-26-19.38.43-2-xl.png 1200w"></figure>
<p>出てきた画面をスクロールして下の方に出ている請求履歴というボタンを押します。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/65/receipt.jpg" alt="CapCut請求履歴画面（領収書をダウンロードできる）" width="368" height="611" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/65/responsive/receipt-xs.jpg 300w ,https://corkborg.github.io/media/posts/65/responsive/receipt-sm.jpg 480w ,https://corkborg.github.io/media/posts/65/responsive/receipt-md.jpg 749w ,https://corkborg.github.io/media/posts/65/responsive/receipt-xl.jpg 1200w"></figure>
<p>その中にReceiptというリンクがあるので押すとブラウザが起動して領収書のPDFが手に入ります。</p>
<p>これで完了です。</p>
<p>ちなみに画面を見る感じここでメールを設定するとそちらに領収書を送ってくれそうなのですが、画面がバグっててメールを受け付けないので設定出来ませんでした。</p>
<h2>領収書の内容に要望がある場合</h2>
<p>請求先の名前をアカウント名から変更する必要がある場合や、領収書に必要な情報が欠けている場合メールで対応を依頼します。</p>
<p>とりあえずダウンロードしたPDFでは要件を満たさない旨を問い合わせると諸々必要な情報について教えてもらえるので、その通りにアカウント情報や注文情報などを送ります。</p>
<p>2025年9月の所CapCutへの問い合わせはこちらです。</p>
<pre class="language-apacheconf"><code>capcut.support@bytedance.com</code></pre>
<p>メールでのやり取りは基本英語になります。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>VitalをMac版FL Studioにインストールする方法</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/install-vital-for-fl-studio-mac/"/>
        <id>https://corkborg.github.io/install-vital-for-fl-studio-mac/</id>
        <media:content url="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-21.36.58-2.jpg" medium="image" />
            <category term="Mac"/>

        <updated>2025-04-19T21:44:09+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-21.36.58-2.jpg" alt="VITAL" />
                    無料のウェーブテーブルシンセサイザーVitalをMacのFL Studioで使えるようにする方法を紹介します。 Vitalの公式ホームページにアクセスします https://vital.audio/ Vital（Early&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-21.36.58-2.jpg" class="type:primaryImage" alt="VITAL" /></p>
                <p>無料のウェーブテーブルシンセサイザーVitalをMacのFL Studioで使えるようにする方法を紹介します。</p>
<h2>VitalをMacにインストールする</h2>
<p>Vitalの公式ホームページにアクセスします<br><a href="https://vital.audio/" target="_blank" rel="noopener noreferrer">https://vital.audio/</a></p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59//sukurinsiyotuto-2025-04-19-21.33.29.jpg" alt="" width="2328" height="1494" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.33.29-xs.jpg 300w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.33.29-sm.jpg 480w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.33.29-md.jpg 749w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.33.29-xl.jpg 1200w"></figure>
<ul>
<li>右上のGET VITALに移動します。</li>
<li>プランを選択する必要がありますがFreeプランを選択します（後ほどアップグレードもできるので）</li>
<li>アカウントの作成を求められるのでメールとパスワードを入れます</li>
</ul>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59//sukurinsiyotuto-2025-04-19-21.35.39.jpg" alt="" width="2204" height="1496" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.35.39-xs.jpg 300w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.35.39-sm.jpg 480w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.35.39-md.jpg 749w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.35.39-xl.jpg 1200w"></figure>
<p>Vital（Early access）とVitalを選ぶ事ができます。</p>
<p>FL Studio 2024ではCLAPという新しい規格のプラグインに対応しています。<br>CLAPは最新のCPUで効率的にプラグインを動かすことができる規格です。</p>
<p>VitalでCLAPに対応しているのは今のところEarly Access版だけなのでそちらをダウンロードします。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59//sukurinsiyotuto-2025-04-19-21.40.56.png" alt="" width="218" height="232" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.40.56-xs.png 300w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.40.56-sm.png 480w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.40.56-md.png 749w ,https://corkborg.github.io/media/posts/59//responsive/sukurinsiyotuto-2025-04-19-21.40.56-xl.png 1200w"></figure>
<p>ダウンロードされてきたpkgファイルを開いてインストールを行います。<br>インストール時に何か注意するべき事項はないです。</p>
<h2>FL StudioでVITALを選択できるようにする</h2>
<p>VitalはMac標準のプラグインディレクトリにインストールされたのですが、このままではFL Studioで認識できないので操作を行います。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-21.55.13.2.jpg" alt="FL Studio Manage Pluginの選択方法" width="1314" height="632" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.55.13.2-xs.jpg 300w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.55.13.2-sm.jpg 480w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.55.13.2-md.jpg 749w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.55.13.2-xl.jpg 1200w"></figure>
<p>FLStudioを開いてADD -&gt; Manage Pluginsを押します。<br>（右の方にあるやつです。More Pluginsと間違えないように）</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-21.49.54.png" alt="FL Studio Plugin Manager" width="2138" height="1356" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.49.54-xs.png 300w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.49.54-sm.png 480w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.49.54-md.png 749w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-21.49.54-xl.png 1200w"></figure>
<p>プラグインマネージャーの右上のFind installed pluginsを押してプラグインのスキャンを行います。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-28-2.57.24.png" alt="" width="1464" height="202" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-28-2.57.24-xs.png 300w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-28-2.57.24-sm.png 480w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-28-2.57.24-md.png 749w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-28-2.57.24-xl.png 1200w"></figure>
<p>スキャンが完了するとVitalが出てきます。星マークを押します。</p>
<p>VitalはAU、VST、CLAPというプラグインの規格に対応しています。CLAPが一番高機能なのでこちらを選択します。<br>（プラグインロード時にクラッシュが発生する場合は他の形式を試してみてください）</p>
<p>Plugin Managerの設定が即時反映されない場合があるので<strong>一度FL Studioを再起動します。</strong></p>
<h2>Vitalが起動できるか確認する</h2>
<p>FLStudioを起動してプラグイン選択画面でVITALと入力します。<br>ここでVitalが出てこない場合Plugin Managerで星マーク（★）を選択し忘れてるかもしれないです。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-22.00.25.jpg" alt="" width="1478" height="1674" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.00.25-xs.jpg 300w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.00.25-sm.jpg 480w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.00.25-md.jpg 749w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.00.25-xl.jpg 1200w"></figure>
<p>Vitalを選択してチャンネルラックに追加します。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-22.02.16.png" alt="FL Studio Channel Rack" width="940" height="492" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.02.16-xs.png 300w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.02.16-sm.png 480w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.02.16-md.png 749w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.02.16-xl.png 1200w"></figure>
<p>チャンネルラックから選択するとログインを求められるので、Vitalをダウンロードする際に登録したメールとパスワードを入力します。</p>
<p>ログインが完了するとシンセ画面が出てきます。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/59/sukurinsiyotuto-2025-04-19-22.08.44.png" alt="VITALがFL Studioで起動している様子" width="2330" height="1330" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.08.44-xs.png 300w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.08.44-sm.png 480w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.08.44-md.png 749w ,https://corkborg.github.io/media/posts/59/responsive/sukurinsiyotuto-2025-04-19-22.08.44-xl.png 1200w"></figure>
<p>音が出ればインストール成功です。</p>
<h2>最後に</h2>
<p>M1 Macbook Airを使っていますが普通に動きました。</p>
<p>画面のサイズが大きすぎる場合はシンセのVitalアイコンを押すとサイズを変更できます。</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2コマンドでアカウント登録からWebページ公開ができるpico.sh紹介</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/review-picosh/"/>
        <id>https://corkborg.github.io/review-picosh/</id>
        <media:content url="https://corkborg.github.io/media/posts/58/sukurinsiyotuto-2025-04-05-4.46.54.png" medium="image" />
            <category term="プログラミング"/>
            <category term="ネットワーク"/>

        <updated>2025-04-05T05:22:07+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/58/sukurinsiyotuto-2025-04-05-4.46.54.png" alt="pico.sh管理画面" />
                    HTMLを作った際にそれをWebから見れるようにしたいですよね。 ただ、意外とWebページを公開するのってめんどくさいです。 例えば、レンタルサーバを借りると毎月お金がかかります。GitHub Pageは無料ですがGitやGitHub Actionsの設定をするのがかなりめんどくさいです。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/58/sukurinsiyotuto-2025-04-05-4.46.54.png" class="type:primaryImage" alt="pico.sh管理画面" /></p>
                <p>HTMLを作った際にそれをWebから見れるようにしたいですよね。<br>ただ、意外とWebページを公開するのってめんどくさいです。</p>
<p>例えば、レンタルサーバを借りると毎月お金がかかります。GitHub Pageは無料ですがGitやGitHub Actionsの設定をするのがかなりめんどくさいです。</p>
<p>そこで今回はsshコマンドを使うだけで最速でアカウント登録ができ、ssh（関連）コマンドで即Webページを公開できてしまう超お手軽レンタルサーバpico.shを紹介します。</p>
<h2>pico.shの特徴</h2>
<ul>
<li>アカウント登録が超簡単</li>
<li><strong>30MB</strong>までWebページを公開できる</li>
<li>ドメインが付与される</li>
<li>自動でTLSの設定が行われる</li>
<li>必要なのはsshコマンドだけ（Macには標準で入ってる）</li>
</ul>
<p><a href="https://pico.sh/" target="_blank" rel="noopener noreferrer">https://pico.sh/</a></p>
<h2>使い方</h2>
<p><a href="https://pico.sh/getting-started" target="_blank" rel="noopener noreferrer">https://pico.sh/getting-started</a></p>
<p>ターミナルで二回コマンドを打つだけで公開できます。</p>
<h3>アカウント登録</h3>
<p>pico.shにsshの公開鍵を登録します。</p>
<ul>
<li>ターミナルを開きそこでssh pico.shする</li>
<li>アカウント名を求められるのでアルファベットで適当な名前を入力</li>
</ul>
<p>※ sshというコマンドを今まで一度も使ったことがない人の場合鍵を用意する必要があります。ssh-keygenなどで別途調べて見てください。</p>
<pre class="language-bash"><code>ssh pico.sh</code></pre>
<p>こんな感じの表示が出たら登録完了です。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/58/sukurinsiyotuto-2025-04-05-5.03.15.png" alt="" width="2546" height="416" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/58/responsive/sukurinsiyotuto-2025-04-05-5.03.15-xs.png 300w ,https://corkborg.github.io/media/posts/58/responsive/sukurinsiyotuto-2025-04-05-5.03.15-sm.png 480w ,https://corkborg.github.io/media/posts/58/responsive/sukurinsiyotuto-2025-04-05-5.03.15-md.png 749w ,https://corkborg.github.io/media/posts/58/responsive/sukurinsiyotuto-2025-04-05-5.03.15-xl.png 1200w"></figure>
<h3>Webページのアップロード</h3>
<p>用意したHTMLをアップロードします。</p>
<p>ターミナルで下記のようなコマンドを実行します。</p>
<pre class="language-bash"><code>rsync index.html pgs.sh:/example/</code></pre>
<p>１階層目のディレクトリがプロジェクト名として使用されるので、何らかの名前を入れる必要があります。<br>上のコマンドではexampleがプロジェクト名。</p>
<p>このような感じでWebページを公開することができました。<br><a href="https://corkborg-example.pgs.sh/" target="_blank" rel="noopener noreferrer">https://corkborg-example.pgs.sh/</a></p>
<p>たった2コマンドでアカウント登録からWebページの公開までできてしまいました。</p>
<h2>有料プラン</h2>
<p>月2ドルのPICO+という有料プランがあります。</p>
<p>Webページのアクセス解析が行えるようになるのと、ストレージの上限が10GBになるようです。</p>
<p><a href="https://pico.sh/plus" target="_blank" rel="noopener noreferrer">https://pico.sh/plus</a></p>
<h2>まとめ</h2>
<p>とてもお手軽にWebページを公開することができてしまいました。<br>これ以上に早い手順で公開できる方法はこの世に存在しないと思います。</p>
<p>pico.sh超便利ですね。おすすめです。</p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>NEX-7を今更買ったのでE-M5とサイズを比べてみた</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/size-compare-nex-7-vs-em-5/"/>
        <id>https://corkborg.github.io/size-compare-nex-7-vs-em-5/</id>
        <media:content url="https://corkborg.github.io/media/posts/55/DSC_2314.2.JPG" medium="image" />
            <category term="カメラ"/>

        <updated>2025-02-10T17:55:28+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/55/DSC_2314.2.JPG" alt="" />
                    今更ながら2012年発売のSONY NEX-7を手に入れました。 NEX-7はセンサー（フィルム）サイズがAPS-Cで現行のα6700などの超旧世代機と言えます。 超旧世代とは言え2430万画素もあり、Eマウントレンズ。いわゆるSONYの現行のレンズが使えるため中古価格の割には実用性と性能が高いです（ボディが2万円でした）。 NEX-7は現行のαシリーズと比べてもコンパクト性が高くそこがとても優れているポイントなので、今回はマイクロフォーサーズのOM-D&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/55/DSC_2314.2.JPG" class="type:primaryImage" alt="" /></p>
                <p>今更ながら2012年発売のSONY NEX-7を手に入れました。</p>
<p>NEX-7はセンサー（フィルム）サイズがAPS-Cで現行のα6700などの超旧世代機と言えます。</p>
<p>超旧世代とは言え2430万画素もあり、Eマウントレンズ。いわゆるSONYの現行のレンズが使えるため中古価格の割には実用性と性能が高いです（ボディが2万円でした）。</p>
<p>NEX-7は現行のαシリーズと比べてもコンパクト性が高くそこがとても優れているポイントなので、今回はマイクロフォーサーズのOM-D E-M5 IIとサイズの比較してみることにしました。</p>
<p>最後に軽くNEX-7を使った所管なども記載します。</p>
<h2>サイズ比較</h2>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/55/DSC_2315.2.JPG" alt="E-M5 IIとNEX-7のサイズ比較 正面" width="2724" height="1500" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/55/responsive/DSC_2315.2-xs.JPG 300w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2315.2-sm.JPG 480w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2315.2-md.JPG 749w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2315.2-xl.JPG 1200w"></figure>
<p>ちなみに比較しているカメラはE-M5 IIでSIGMA 19mm 2.8fをつけています。</p>
<p>NEX-7の方には七工匠 55mm F1.4をつけています。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/55/DSC_2316.2.JPG" alt="E-M5 IIとNEX-7のサイズ比較 背面" width="3183" height="1500" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/55/responsive/DSC_2316.2-xs.JPG 300w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2316.2-sm.JPG 480w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2316.2-md.JPG 749w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2316.2-xl.JPG 1200w"></figure>
<p>NEX-7とE-M5 IIではほとんど横のサイズ差はなさそうです。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/55/DSC_2317.2.JPG" alt="E-M5 IIとNEX-7のサイズ比較 側面" width="2892" height="1500" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/55/responsive/DSC_2317.2-xs.JPG 300w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2317.2-sm.JPG 480w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2317.2-md.JPG 749w ,https://corkborg.github.io/media/posts/55/responsive/DSC_2317.2-xl.JPG 1200w"></figure>
<p>バッテリー部分の厚みはNEX-7のほうがありますが、全体的にはE-M５ IIのほうが厚みがあります。</p>
<h2>結論、NEX-7はコンパクト</h2>
<p>E-M5がマイクロフォーサーズという小さいセンサーを搭載していることを考えると、APS-Cサイズのセンサーを搭載していながらEM-5とほぼ同等のNEX-7はかなり小さいと言えそうです。</p>
<p>ちなみにマイクロフォーサーズにはE-M10というもう一回り小さいものもあります。</p>
<h2>Z6とNEX-7でサイズ比較をしてみた</h2>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/55/P2110207.2-2.JPG" alt="Z6とNEX-7のサイズ比較" width="2424" height="1500" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/55/responsive/P2110207.2-2-xs.JPG 300w ,https://corkborg.github.io/media/posts/55/responsive/P2110207.2-2-sm.JPG 480w ,https://corkborg.github.io/media/posts/55/responsive/P2110207.2-2-md.JPG 749w ,https://corkborg.github.io/media/posts/55/responsive/P2110207.2-2-xl.JPG 1200w"></figure>
<p>一応、センサーがフルサイズのNikon Z6とNEX-7でサイズ比較もしてみました。</p>
<p>NEX-7のほうが圧倒的にコンパクトですね。</p>
<p>Z6はフルサイズミラーレスの中でも大きい方ではありますが。</p>
<h2>NEX-7の使い勝手はどうか？</h2>
<p>今回、七工匠のマニュアルレンズを使って撮影したのでAF性能などは評価できていません。</p>
<p>APS-Cなだけあってレンズが明るければしっかりボケるし、画素が高いのでぱっきりした写りも全然いけます。</p>
<p>ただ、ISO感度を上げるとすぐノイズが出てきます。そのため暗い時間帯は使いづらいかもしれないです。</p>
<p>総合的に言うと値段比でとてつもなくコスパが良く満足しています。</p>
<figure class="post__image" ><figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/55/DSC00026.JPG" alt="デイジー NEX-7 七工匠 55mm F1.4で撮影" width="3000" height="2000" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/55/responsive/DSC00026-xs.JPG 300w ,https://corkborg.github.io/media/posts/55/responsive/DSC00026-sm.JPG 480w ,https://corkborg.github.io/media/posts/55/responsive/DSC00026-md.JPG 749w ,https://corkborg.github.io/media/posts/55/responsive/DSC00026-xl.JPG 1200w"></figure>
<figcaption >ローキーに調整して撮りました</figcaption>
</figure>
<figure class="post__image" ><figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/55/DSC00012.JPG" alt="コクーンタワー NEX-7 七工匠 55mm F1.4で撮影" width="3000" height="2000" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/55/responsive/DSC00012-xs.JPG 300w ,https://corkborg.github.io/media/posts/55/responsive/DSC00012-sm.JPG 480w ,https://corkborg.github.io/media/posts/55/responsive/DSC00012-md.JPG 749w ,https://corkborg.github.io/media/posts/55/responsive/DSC00012-xl.JPG 1200w"></figure>
<figcaption >マニュアルフォーカスがまだうまく操作できない</figcaption>
</figure>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>MacBookの画面を自力交換したら色性能はどうなる？</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/color-space-coverage-replaced-macbook-screen/"/>
        <id>https://corkborg.github.io/color-space-coverage-replaced-macbook-screen/</id>
        <media:content url="https://corkborg.github.io/media/posts/52/sukurinsiyotuto-2024-12-16-15.56.35.2.png" medium="image" />
            <category term="Apple製品"/>

        <updated>2024-12-15T22:47:10+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/52/sukurinsiyotuto-2024-12-16-15.56.35.2.png" alt="自力交換したM1 MacBook Airの色カバー率" />
                    M1 MacBook Airを使っていて液晶の右下を割ってしまい、縦横に縞が入るようになってしまいました。 原因ははっきり覚えてはいないのですが、イヤホンのケーブルを挟んだまま閉じてしまったことだと思います。 Appleの修理サービスなど修理方法を色々検討したのですが、古いMacにあまりお金をかけたくなかったので交換用の液晶部品を自分自身で交換することにしました。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/52/sukurinsiyotuto-2024-12-16-15.56.35.2.png" class="type:primaryImage" alt="自力交換したM1 MacBook Airの色カバー率" /></p>
                <p>M1 MacBook Airを使っていて液晶の右下を割ってしまい、縦横に縞が入るようになってしまいました。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/52/PXL_20241215_095846480.jpg" alt="液晶が割れたm1 macbook air" width="197" height="350" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/52/responsive/PXL_20241215_095846480-xs.jpg 300w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241215_095846480-sm.jpg 480w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241215_095846480-md.jpg 749w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241215_095846480-xl.jpg 1200w"></figure>
<p>原因ははっきり覚えてはいないのですが、イヤホンのケーブルを挟んだまま閉じてしまったことだと思います。</p>
<p>Appleの修理サービスなど修理方法を色々検討したのですが、古いMacにあまりお金をかけたくなかったので交換用の液晶部品を自分自身で交換することにしました。</p>
<p>これが修理を完了した後のMacです。<strong>交換パーツはサードパーティ品（純正ではない</strong><strong>）</strong>のようで天板からAppleのロゴが無くなってしまいました。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/52/PXL_20241216_065059444.jpg" alt="液晶交換でロゴを失ったM1 MacBook Air" width="3900" height="2120" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_065059444-xs.jpg 300w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_065059444-sm.jpg 480w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_065059444-md.jpg 749w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_065059444-xl.jpg 1200w"></figure>
<p><a href="https://jp.ifixit.com/Guide/MacBook+Air+13%E3%82%A4%E3%83%B3%E3%83%81Late+2020+%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%81%AE%E4%BA%A4%E6%8F%9B/142554" target="_blank" rel="noopener noreferrer">MacBook+Air+13インチLate+2020+スクリーンの交換 - iFixit</a></p>
<h2>色再現度（色域カバー率）を確認する</h2>
<p>ディスプレイでは様々な色を表示することができますが、この世に存在するすべての色を再現することはできません。ただ、ディスプレイのグレードによっては色の量が多くなります。</p>
<p>この再現できる色の量の指標として色域というものがあります。</p>
<p>代表的なものだとsRGB、Display P3、Adobe RGBと呼ばれ、これらの色域がどれくらいカバーできているかが液晶の色再現度を確認するうえで重要な指標になります。</p>
<p><a href="https://www.eizo.co.jp/eizolibrary/color_management/adobergb/" target="_blank" rel="noopener noreferrer">Adobe RGBとsRGB、用途に合った色域のモニター選び | EIZO株式会社</a></p>
<h2>MacBookは色の性能が高い</h2>
<p>通常色周りの性能にこだわらずに購入したディスプレイはsRGBですらカバー率が微妙なのですが、MacBookはどのグレードでもきれいな色を表現することにこだわっています。</p>
<p>M1 MacBook AirはsRGBで100%程度、Display P3だと90%以上のカバー率があることが多いようです。</p>
<p>今回、Amazonで交換用液晶を買いましたが色周りのスペックが書いてありませんでした。せめてsRGB 100%近い再現度は合ってくれと思いながら購入しました。</p>
<h2>交換した液晶をカラーキャリブレーション</h2>
<figure class="post__image" ><img loading="lazy" src="https://corkborg.github.io/media/posts/52/PXL_20241216_141034572.MP.jpg" alt="datacolor SpyderX" width="3716" height="2120" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_141034572.MP-xs.jpg 300w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_141034572.MP-sm.jpg 480w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_141034572.MP-md.jpg 749w ,https://corkborg.github.io/media/posts/52/responsive/PXL_20241216_141034572.MP-xl.jpg 1200w">
<figcaption >カラーキャリブレーター（SpyderX）</figcaption>
</figure>
<p>どんなに性能の良い高級液晶でもカラーキャリブレーションをしなければ色がズレズレで正しい色を表示することができません。</p>
<p>Macは工場出荷時点でカラーキャリブレーションを一度実施しています。なのである程度の期間は正しい色を表示できます。</p>
<p>今回の場合は自前で用意した液晶なのでSpyder Xというキャリブレーターで自力のキャリブレーションを実施しました。</p>
<p>結果として、デフォルトの色味は緑色にかなりズレていたようでした。</p>
<p>Macの液晶を交換する場合カラーキャリブレーターも用意したほうが良いと思います。</p>
<p><a href="https://www.datacolor.com/spyder/ja/spyderx2/" target="_blank" rel="noopener noreferrer">Datacolor Spyder 公式サイト</a></p>
<h2>交換液晶で性能が向上してしまった</h2>
<p>キャリブレーションを行うと再現可能な色の性能も計測することができます。</p>
<p>結果<strong>sRGBのカバー率100%、Display P3のカバー率99%</strong>とかなり良い性能でした。</p>
<p>特にDisplay P3は交換前の液晶では99%までは行ってなかったはずなので液晶交換で性能が上がっているという事になります。</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://corkborg.github.io/media/posts/52/gallery/sukurinsiyotuto-2024-12-16-15.56.35.png" data-size="864x886"><img loading="lazy" src="https://corkborg.github.io/media/posts/52/gallery/sukurinsiyotuto-2024-12-16-15.56.35-thumbnail.png" alt="sRGBの結果" width="720" height="738"></a>
<figcaption>sRGBの結果</figcaption>
</figure>
<figure class="gallery__item"><a href="https://corkborg.github.io/media/posts/52/gallery/sukurinsiyotuto-2024-12-16-15.56.02.png" data-size="860x896"><img loading="lazy" src="https://corkborg.github.io/media/posts/52/gallery/sukurinsiyotuto-2024-12-16-15.56.02-thumbnail.png" alt="Display P3の結果" width="720" height="750"></a>
<figcaption>Display P3の結果</figcaption>
</figure>
<figure class="gallery__item"><a href="https://corkborg.github.io/media/posts/52/gallery/sukurinsiyotuto-2024-12-16-15.56.22.png" data-size="858x894"><img loading="lazy" src="https://corkborg.github.io/media/posts/52/gallery/sukurinsiyotuto-2024-12-16-15.56.22-thumbnail.png" alt="AdobeRGBの結果" width="720" height="750"></a>
<figcaption>AdobeRGBの結果</figcaption>
</figure>
</div></div>
<p>Display P3は主にApple製品で重視される色空間なので、今回の交換パーツにはMacの液晶を生産している工場と同じものが使われていたんじゃないかと思います。</p>
<p><a href="https://k-tai.watch.impress.co.jp/docs/column/keyword/1288035.html" target="_blank" rel="noopener noreferrer">「Display P3」 とは - ケータイWatch</a></p>
<p>性能が良くなった件ですが、工場の生産時期が後期で液晶の性能が向上したのではないかと推測しています。</p>
<h2>最後に</h2>
<p>今回は本物相当の性能がある交換液晶を手に入れることができました。</p>
<p>自力交換時の注意点として自力でカラーキャリブレーションができないと表示される色がかなり変になるのでカラーキャリブレーターを用意しましょう。</p>
<p>（Apple以外の修理業者もキャリブレーションまではしてくれないと思う）</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Apple Pencilの偽物の作りが非常に高度で驚いた話</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/fake-apple-pencil-2nd-gen-review/"/>
        <id>https://corkborg.github.io/fake-apple-pencil-2nd-gen-review/</id>
        <media:content url="https://corkborg.github.io/media/posts/49/DSC_1898.JPG" medium="image" />
            <category term="Apple製品"/>

        <updated>2024-08-18T18:18:26+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/49/DSC_1898.JPG" alt="本物と偽物のApple Pencil. 奥側が偽物、手前が本物" />
                    Apple Pencil二世代を壊してしてしまいました。 Apple PencilはAppleに修理依頼しても交換対応になってしまうことが多いです。つまり新品を購入するのと同じ値段がかかります。 現在、Apple&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/49/DSC_1898.JPG" class="type:primaryImage" alt="本物と偽物のApple Pencil. 奥側が偽物、手前が本物" /></p>
                <p>Apple Pencil二世代を壊してしてしまいました。</p>
<p>Apple PencilはAppleに修理依頼しても交換対応になってしまうことが多いです。つまり新品を購入するのと同じ値段がかかります。</p>
<p>現在、Apple Pencil Proが登場していていわゆる型落ちのApple Pencil にフルプライス払うのも馬鹿らしいと思い中古を探していました。</p>
<p>メルカリを見てみると手頃な値段のものが売っていたので購入したのですが、なんとApple Pencilの偽物が届いてしまいました。</p>
<p>この偽のApple Pencilはどうにか返品できたのですが、精巧な偽物で驚いたので記事にしました。</p>
<h2>偽物は筆圧に対応してない</h2>
<p>あまりにも高度な偽物なので筆圧機能に対応してないことに気づかなかったらそのまま使っていたかも知れないです。</p>
<p>他にダブルタップなどの機能に対応してないようです。</p>
<p>他のメーカーから正式に出ているApple Pencil互換品でも筆圧に対応しているものは皆無なのでApple以外が筆圧に対応したペンを製造するのはかなり難易度が高いのではないかと思います。</p>
<h2>Apple Pencilの偽物と本物の比較</h2>
<p>偽物と本物を比較してみましょう。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/49/DSC_1897.JPG" alt="一番上の一本が偽物で、下2つが本物のApple Pencil" width="1000" height="665" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/49/responsive/DSC_1897-xs.JPG 300w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1897-sm.JPG 480w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1897-md.JPG 749w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1897-xl.JPG 1200w"></figure>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://corkborg.github.io/media/posts/49/DSC_1895.JPG" alt="偽物のApple Pencilとの比較（一番上が偽物）" width="1000" height="611" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/49/responsive/DSC_1895-xs.JPG 300w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1895-sm.JPG 480w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1895-md.JPG 749w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1895-xl.JPG 1200w">
<figcaption >一番上の一本が偽物で、下2つが本物のApple Pencil</figcaption>
</figure>
<p>偽物のわかりやすい特徴ではVCCIマーク、技適マークが無いようです（ただ、海外仕様の場合は純正でもこれらのマークはついていない？）。</p>
<p>本物と比較しないとわからないレベルなのですが、偽物は若干ロゴのサイズとフォントが違うのと、黄身がかってます。</p>
<h2>偽物の箱など</h2>
<figure class="post__image" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/49/DSC_1903.JPG" alt="偽物のApplePencilのパッケージと比較（右が偽物）" width="1000" height="665" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/49/responsive/DSC_1903-xs.JPG 300w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1903-sm.JPG 480w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1903-md.JPG 749w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1903-xl.JPG 1200w"></figure>
<figcaption >左が本物、右側が偽物</figcaption>
</figure>
<p>ところどころ色の濃さなどが違うのですが、ほとんど違いがありません。</p>
<p>偽物だけケースの収まりが悪いので比較したのですが、偽物は本物に比べて1,2mmほど大きいようです。</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://corkborg.github.io/media/posts/49/DSC_1904.JPG" alt="偽物のApplePencilとの長さ比較" width="1000" height="427" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/49/responsive/DSC_1904-xs.JPG 300w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1904-sm.JPG 480w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1904-md.JPG 749w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1904-xl.JPG 1200w">
<figcaption >下が偽物</figcaption>
</figure>
<h2>シリアルが高度に偽装されている</h2>
<p>シリアルは適当なんじゃないかと思っていたのですが高度に偽装されていました。</p>
<p>Apple Pencilのシリアルの確認方法は３つほどあります。</p>
<ul>
<li>箱の外側</li>
<li>ペン先を取り除いたApple Pencil 内部</li>
<li>iPadの情報から電子的な確認</li>
</ul>
<p>流石に製造コストの問題でApple Pencil内部のシリアルまで一致させるのは難しいと思っていたのですがすべて一致していました。</p>
<p>こんな事できることに驚きが隠せません。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/49/24-08-18-17-02-18-1136.2.png" alt="偽物のApple Pencilのシリアル情報" width="1292" height="768" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/49/responsive/24-08-18-17-02-18-1136.2-xs.png 300w ,https://corkborg.github.io/media/posts/49/responsive/24-08-18-17-02-18-1136.2-sm.png 480w ,https://corkborg.github.io/media/posts/49/responsive/24-08-18-17-02-18-1136.2-md.png 749w ,https://corkborg.github.io/media/posts/49/responsive/24-08-18-17-02-18-1136.2-xl.png 1200w"></figure>
<p>製造元とモデル番号は本物と同一ですが、ファームウェアバージョンとハードウェアバージョンが本物とはだいぶ異なります（フォーマットが全く別物感）。</p>
<h2>ペン先の色と仕上げが本物と若干違う</h2>
<p>左の1つが偽物のペン先です。右2つが本物です。</p>
<figure class="post__image" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/49/DSC_1902.JPG" alt="" width="1000" height="681" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/49/responsive/DSC_1902-xs.JPG 300w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1902-sm.JPG 480w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1902-md.JPG 749w ,https://corkborg.github.io/media/posts/49/responsive/DSC_1902-xl.JPG 1200w"></figure>
<figcaption >一番左が偽物</figcaption>
</figure>
<p>写真では分かりづらいのですが、偽物は若干色が明るく、バリのような物が残っています。</p>
<p>ちなみに偽物、本物両方のペン先とも互換性がありどちらにもペン先をはめることができます。</p>
<h2>Bluetoothのペアリング手順が本物と違う</h2>
<p>本物のApple PencilはiPad側面で充電を開始すると勝手にBluetoothのペアリングも行われます。</p>
<p>偽物は充電開始すると使用できるようになるのですが、Bluetoothでのペアリングは行われないようで、手動ペアリングが必要です。</p>
<p>その際Bluetooth画面にApple Pencilが2つ表示されます。故障した以前のApple Pencilが表示されているのか？と思ったのですが色々検証した結果、なぜか一つの機器で2つBluetoothデバイスが表示されるようです。</p>
<h2>感想</h2>
<p>Apple製品の偽物の話はよく聞きますが、ぼーっとしていなければ見分けれられるものばかりだと思っていました。</p>
<p>ただ、今回の偽物Apple Pencilは非常に凝っていて筆圧の問題がなければ何も疑っていなかったと思います。</p>
<p>ペン先へのシリアル印字の件から考えるに高度な製造工程を踏まなければこのようなものは作れないと思います。Appleの偽物を作っている業者は自分が想像する数倍本気度が高いということがわかりました。</p>
<p>Apple製品は世界中で人気がある上、値段も高いため本気で偽物を作っても利益率が高いのかなと思います。この先中古を購入する際には注意したいです。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>RaspberryPi4で5GbEの高速インターネットアダプタを使ってみた</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/using-5gbe-nic-adapter-with-raspberrypi4/"/>
        <id>https://corkborg.github.io/using-5gbe-nic-adapter-with-raspberrypi4/</id>
        <media:content url="https://corkborg.github.io/media/posts/48/DSC_1879.jpeg" medium="image" />
            <category term="ネットワーク"/>

        <updated>2024-07-10T13:17:06+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/48/DSC_1879.jpeg" alt="QNA-UC5G1TとRaspberryPi400" />
                    RaspberryPi5の時代に今更なのですが、RaspberryPi4にUSBの5GbEのネットワークアダプタを接続してベンチマークを行ってみました。 RaspberryPi4は標準では1GbE（秒間125MB転送）しかできないのでどれくらい伸びるのか見てみたいと思います。 QNAPの5GbEを使います。 QNAPの10GbEはthunderboltに対応したUSBポートのみ対応なのに対してこちらは、USB 3.2&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/48/DSC_1879.jpeg" class="type:primaryImage" alt="QNA-UC5G1TとRaspberryPi400" /></p>
                <p>RaspberryPi5の時代に今更なのですが、RaspberryPi4にUSBの5GbEのネットワークアダプタを接続してベンチマークを行ってみました。</p>
<p>RaspberryPi4は標準では1GbE（秒間125MB転送）しかできないのでどれくらい伸びるのか見てみたいと思います。</p>
<h2>QNAP QNA-UC5G1T</h2>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/48/sukurinsiyotuto-2024-07-15-14.54.33.png" alt="QNA-UC5G1Tの前面" width="2076" height="1356" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-14.54.33-xs.png 300w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-14.54.33-sm.png 480w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-14.54.33-md.png 749w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-14.54.33-xl.png 1200w"></figure>
<p>QNAPの5GbEを使います。</p>
<p>QNAPの10GbEはthunderboltに対応したUSBポートのみ対応なのに対してこちらは、USB 3.2 Gen1に対応していれば使用することができます。</p>
<p>5GbEのネットワークアダプタはどれも結構熱くなりますが、QNA-UC5G1Tは金属筐体で覆われているので放熱性が良いほうかもしれないです。</p>
<p>長期間普段遣いしたこともありますが、あまり困ったことはありませんでした。</p>
<p><a href="https://www.qnap.com/ja-jp/product/qna-uc5g1t">QNA-UC5G1T - QNAP公式</a></p>
<h2>RaspberryPi 400</h2>
<p>キーボードとコンピュータが一体化した、RaspberryPiの中でもパーソナルコンピューター用途に特化したものです。</p>
<p>中身はRaspberryPi4とほぼ同じはずです（少しCPUが早いらしいですが）</p>
<p>一時期、普段遣いしようと思って使っていたのですが、動作がもっさりしていてため押し入れに入っていました。<br>どんなに良いMicroSDカードでもアプリケーションの動きに対して遅すぎて要所要所で時間がかかってしまうところとかが原因かなと思っています。快適に使うにはSSDなどに対応する必要がありそうです。</p>
<p>見た目はニューロマンサーという小説に出てくるオノ=センダイ・サイバースペース7みたいでカッコいいんですけどね…。</p>
<h2>接続</h2>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/48/PXL_20240615_123259370.2.jpg" alt="" width="1820" height="1024" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/48/responsive/PXL_20240615_123259370.2-xs.jpg 300w ,https://corkborg.github.io/media/posts/48/responsive/PXL_20240615_123259370.2-sm.jpg 480w ,https://corkborg.github.io/media/posts/48/responsive/PXL_20240615_123259370.2-md.jpg 749w ,https://corkborg.github.io/media/posts/48/responsive/PXL_20240615_123259370.2-xl.jpg 1200w"></figure>
<p>こんな感じで接続しています。</p>
<p>左から、QNA-UC5G1T、電源、HDMIという感じです。</p>
<h2>ベンチマーク</h2>
<p>10GbEに対応したサーバーに対してiperf3を行うことで転送速度のベンチマークを行いました。</p>
<p>結果としては大体1.8Gbps程度出るようです。（毎秒225MB転送）</p>
<p>RaspberryPi 4の非力さだとUSB経由では1Gも超えられないのではないかと思っていたのでなかなか出ますね。</p>
<pre class="language-bash"><code>raspberrypi400:~ $ iperf3 -c benchmark.local
Connecting to host benchmark.local, port 5201
[  5] local raspberrypi400.local port 51338 connected to benchmark.local port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-1.00   sec   213 MBytes  1.78 Gbits/sec    5    841 KBytes
[  5]   1.00-2.00   sec   214 MBytes  1.80 Gbits/sec    2   1012 KBytes
[  5]   2.00-3.00   sec   218 MBytes  1.83 Gbits/sec    1   1.13 MBytes
[  5]   3.00-4.00   sec   214 MBytes  1.79 Gbits/sec    0   1.27 MBytes
[  5]   4.00-5.00   sec   221 MBytes  1.86 Gbits/sec    0   1.39 MBytes
[  5]   5.00-6.00   sec   221 MBytes  1.85 Gbits/sec    1   1.50 MBytes
[  5]   6.00-7.00   sec   219 MBytes  1.84 Gbits/sec    0   1.60 MBytes
[  5]   7.00-8.00   sec   212 MBytes  1.78 Gbits/sec    0   1.70 MBytes
[  5]   8.00-9.00   sec   221 MBytes  1.86 Gbits/sec    0   1.79 MBytes
[  5]   9.00-10.00  sec   215 MBytes  1.80 Gbits/sec    0   1.88 MBytes
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-10.00  sec  2.12 GBytes  1.82 Gbits/sec    9             sender
[  5]   0.00-10.04  sec  2.12 GBytes  1.81 Gbits/sec                  receiver</code></pre>
<h2>消費電力</h2>
<p>QNA-UC5G1T接続してベンチマークをした前後のRasberryPiの消費電力を見ていきます。</p>
<figure class="post__image" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/48/sukurinsiyotuto-2024-07-15-15.06.35-2.png" alt="QNA-UC5G1T接続前のRasberryPi4消費電力 5.02V 0.52A" width="1504" height="862" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.06.35-2-xs.png 300w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.06.35-2-sm.png 480w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.06.35-2-md.png 749w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.06.35-2-xl.png 1200w"></figure>
<figcaption >QNA-UC5G1T接続前のRasberryPi4消費電力</figcaption>
</figure>
<figure class="post__image" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/48/sukurinsiyotuto-2024-07-15-15.07.10.png" alt="QNA-UC5G1Tを接続しベンチーマーク実施後のRasberryPi4消費電力 4.94V 1.20A" width="884" height="636" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.07.10-xs.png 300w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.07.10-sm.png 480w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.07.10-md.png 749w ,https://corkborg.github.io/media/posts/48/responsive/sukurinsiyotuto-2024-07-15-15.07.10-xl.png 1200w"></figure>
<figcaption >QNA-UC5G1Tを接続しベンチーマーク実施後のRasberryPi4消費電力</figcaption>
</figure>
<p>一度消費電力が1.2Aに行った後、RasberryPiからネットワークカードを外してもあまり消費電力が落ちないことからあまり確実とは言えない情報ですが、0.6A程度消費電力が増加しているように見えます。</p>
<p>電圧が結構降下してしまうので、5Vをきっちり出力する電源よりも、RaspberryPi向けに5.2Vの出力に対応したUSBを使用したほうが良さそうです。</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>大容量回線ソフトバンク光10GでIPv6,IPv4の自宅サーバ運用をしてみた</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/home-server-with-softbank-hikari-10g/"/>
        <id>https://corkborg.github.io/home-server-with-softbank-hikari-10g/</id>
        <media:content url="https://corkborg.github.io/media/posts/46/DSC_1877_02.JPG" medium="image" />
            <category term="ネットワーク"/>

        <updated>2024-06-12T22:31:53+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/46/DSC_1877_02.JPG" alt="ソフトバンク光10GのルータとONU" />
                    ソフトバンク光10Gを契約しました。このプランはなんと最大10Gbpsの転送速度インターネットにアクセスできる仕組みになっています。 実際には計測した感じだと3Gbps程度しか出ないのですが、多少お金を追加するだけで1Gbps超えできるので満足しています。 自宅サーバといっても不特定多数の人にサービスを提供するようなものすごい物ではありません。 私は、外からNAS（ファイルサーバ）にアクセスしたり、知り合いと遊ぶゲームサーバなどの用途で自宅サーバを運用することが多いです。 Project&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/46/DSC_1877_02.JPG" class="type:primaryImage" alt="ソフトバンク光10GのルータとONU" /></p>
                <p>ソフトバンク光10Gを契約しました。このプランはなんと最大10Gbpsの転送速度インターネットにアクセスできる仕組みになっています。</p>
<p>実際には計測した感じだと3Gbps程度しか出ないのですが、多少お金を追加するだけで1Gbps超えできるので満足しています。</p>
<h2>自宅サーバを運用したい</h2>
<p>自宅サーバといっても不特定多数の人にサービスを提供するようなものすごい物ではありません。</p>
<p>私は、外からNAS（ファイルサーバ）にアクセスしたり、知り合いと遊ぶゲームサーバなどの用途で自宅サーバを運用することが多いです。</p>
<p><a href="https://corkborg.github.io/how-to-create-multiplayer-server-project-zomboid/" target="_blank" rel="noopener noreferrer">Project Zomboidのゲームサーバを立てる方法 - 塩の惑星</a></p>
<p>多くのプロバイダーは自宅サーバを運用できるのですが、場合によっては難しい場合があります。</p>
<figure class="post__image" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/46/Ming-Cheng-Wei-She-Ding-huairu-1718207908216.drawio-1.png" alt="" width="1050" height="440" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718207908216.drawio-1-xs.png 300w ,https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718207908216.drawio-1-sm.png 480w ,https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718207908216.drawio-1-md.png 749w ,https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718207908216.drawio-1-xl.png 1200w"></figure>
<figcaption >このような感じを目指したい</figcaption>
</figure>
<p>色々あったのですが最終的には上記の様な形にすることができました。</p>
<h2>ソフトバンク光10GはIPv6接続のみだった</h2>
<p>インターネット接続方式にはIPv4という旧来方式と、IPv6という新しい方法があります。</p>
<p>IPv4のサーバにはIPv6、IPv4の回線を使っている人がアクセスできるのですが、IPv6のサーバにはIPv4の回線を使っている人はアクセスすることができません。</p>
<p>現在、IPv6に対応した回線は普及していないのでサーバ運用を行うにはIPv4のほうが断然便利です。</p>
<p>完全に調査不足だったのですがソフトバンク光10GはIPv6のみでインターネットに接続しているようでした。</p>
<p>IPv6のみのインターネットの回線の場合基本的にIPv6アドレスでサーバ運用することになります。<br>IPv6はそこまで普及していないので、外からアクセスすることが難しくなります（喫茶店のwifiなどがIPv6に対応してない）。</p>
<h2>PPPoE接続（IPv4）はできなかった</h2>
<p>10Gではない通常のソフトバンク光もIPv6ですがPPPoEという接続方法を使うことでIPv4だけでインターネットに接続ができるようです。</p>
<p><a href="https://www.softbank.jp/internet/support/sbhikari/connect/pppoe/hgw/">ホームゲートウェイ（N）のユーザー認証設定（PPPoE）をする</a></p>
<p>ただ、試してみたものの接続できませんでした。ソフトバンク光10GはPPPoEに対応してないのではないかと思います（多分通常のソフトバンク光と回線の提供方法が違う）。</p>
<h2>運良くIPv4専有のMAP-Eだった</h2>
<p>本来、IPv6とIPv4は相互に接続できない技術なのですが、それだと困るのでIPv6からIPv4のインターネットにアクセスするための技術がいくつかあります。</p>
<ul>
<li>DS-Lite （サーバ運用は絶望的）</li>
<li>MAP-E（サーバ運用ができるが専有じゃない場合は癖がある）</li>
</ul>
<p>このような技術のなかでも<strong>ソフトバンク光10GはMAP-E</strong>という技術を使用しているようです。</p>
<p>このMAP-EはシンプルにIPv4の通信をホームゲートウェイに中継してくれるので、残りの制御はONU側で実施します。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/46/Ming-Cheng-Wei-She-Ding-huairu-1718208893207.drawio-2.png" alt="ソフトバンク10GのIPoEのMAP-Eについての図" width="980" height="520" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718208893207.drawio-2-xs.png 300w ,https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718208893207.drawio-2-sm.png 480w ,https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718208893207.drawio-2-md.png 749w ,https://corkborg.github.io/media/posts/46/responsive/Ming-Cheng-Wei-She-Ding-huairu-1718208893207.drawio-2-xl.png 1200w"></figure>
<p>ソフトバンク光10GはMAP-Eの中でもIPv4アドレスをまるまる専有させてくれる方式でした、そのため細かい事を無視すると<strong>IPv4、IPv6両方のアドレスがホームゲートウェイに振られている</strong>、デュアルスタックに近い状態です。</p>
<p>なので、割り当てられたIPv4アドレスに対してポート開放やNAT設定もホームゲートウェイ側で実施することができます。</p>
<p>当初IPv6で絶望しかけてましたが一転ソフトバンク光良いじゃんと思いました。</p>
<h3>余談: MAP-Eだけど専有じゃないプロバイダ</h3>
<p>同じMAP-E方式でも専有ではないプロバイダが存在します。</p>
<p>専有ではない場合一つのIPアドレスを複数人で使用します（最近ではNUROもこの方式に移行中とか）。</p>
<p>この方法では一つのIPに紐づいた6万程度のポートをいくつかに分割して、分割したポート事に人に割当を行い。MAP-Eはポートを見て通信をホームゲートウェイに送る方法です</p>
<p>このようなプロバイダでもサーバ運用はできなくはないのですが、ポートの割り振り方法を解析するのが難しく、うまくわかったとしても設定したいポートが使えない可能性が高かったりして使いづらいです。</p>
<h2>まとめ</h2>
<p><strong>ソフトバンク光10Gはまあまあ快適に自宅サーバ運用ができる！</strong></p>
<p>家電量販店の割引に目がくらんでソフトバンク光10Gに迂闊に契約してしまい、一時はIPv6周りで苦しんだのですが、サーバ運用という意味では良い結果になったのと勉強になりました。</p>
<p>もしも、幅広い選択肢と金銭的な余裕があった上で、サーバ運用を検討しているのであれば、サーバ運用専門のプロバイダを選ぶのが一番良いと思います。</p>
<p>10Gの通常回線でサーバを軽く運用したい場合、IPv6とIPv4のデュアルスタック運用のau光などが面倒が無いかもしれないです。</p>
<p>ただ、その他の選択肢でIPv6（IPoEという方式で回線速度が早い）とIPv4の利便性を享受したいと考えたときソフトバンク光10Gはだいぶ良いかもしれないです。</p>
<h2>おまけ：ソフトバンク光の詳細あたり</h2>
<p>一応、MAP-EでのNATの設定方法や、IPv6アドレスの割当など回線の詳細情報を載せておきます。</p>
<h3>IPアドレスの固定まわり</h3>
<p>ソフトバンク光10Gは本格的なサーバ運用者向けの回線ではないのでIPアドレスの完全固定はできないのですが、IPv6、IPv4ともにホームゲートウェイが起動している間は変わらないようです（短時間の再起動でも変更されない）。</p>
<p>数ヶ月使っていますが今のところ変わっていません。</p>
<h3>IPv6アドレスの割当</h3>
<p>IPv6アドレスの割当ですが/56でした。</p>
<h3>ソフトバンク光のMAP-Eアドレス</h3>
<p>IPv4アドレス専有なのでMAP-Eアドレスは非常にシンプルです。<br>割り当てられたサブネットアドレスの後ろにIPv4アドレスを16進数に変換した物がくっつきます。</p>
<p>たとえば2001:db8:3333:4444というサブネットに対して1.1.1.1というアドレスを専有している場合こんな感じです。</p>
<pre>2001:db8:3333:4444:0101:0101:0100:0000</pre>
<h3><span style="color: #000000;">MAP-E周りの設定方法紹介</span></h3>
<p>私はソフトバンクからXG-100NEというホームゲートウェイルーターをもらったので、それでMAP-E周りの設定を行う方法を紹介します。</p>
<p>このルータを設定変更する場合は、通常http://ntt.setupやルータに割り当てたIPアドレスにアクセスすることで管理画面にアクセスできると思います。</p>
<p>ただ、MAP-E周りの設定画面にはここからアクセスすることができません。</p>
<pre>http://ntt.setup:8888/t/</pre>
<p>このアドレスでアクセスするとONUに内蔵されたソフトバンク光の管理画面にアクセスすることができます。</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/46/sukurinsiyotuto-2024-06-13-1.51.46.png" alt="" width="526" height="483" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/46/responsive/sukurinsiyotuto-2024-06-13-1.51.46-xs.png 300w ,https://corkborg.github.io/media/posts/46/responsive/sukurinsiyotuto-2024-06-13-1.51.46-sm.png 480w ,https://corkborg.github.io/media/posts/46/responsive/sukurinsiyotuto-2024-06-13-1.51.46-md.png 749w ,https://corkborg.github.io/media/posts/46/responsive/sukurinsiyotuto-2024-06-13-1.51.46-xl.png 1200w"></figure>
<p>この管理画面の中の静的マスカレード設定というところを設定することで、MAP-E経由で来た特定ポート宛の通信を固定したサーバに送ることができるようになります。</p>
<p>たとえば、80ポートと443ポートを固定してやるとWebサーバを運用できるようになります。</p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>水深20mまでのRICOH WG-6を40m級のダイビングで使うとどうなるか？</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/richoh-wg-6-on-40m-dive/"/>
        <id>https://corkborg.github.io/richoh-wg-6-on-40m-dive/</id>
        <media:content url="https://corkborg.github.io/media/posts/41/024.JPG" medium="image" />
            <category term="カメラ"/>

        <updated>2024-06-09T14:27:00+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/41/024.JPG" alt="30mのダイビング。RICOH WG-6で撮影" />
                    RICOH WG-6をスキューバダイビングで使っています。 WG-6はアウトドア向けのコンパクトカメラで水深20mまでの防水性能があります。 WG-6 -&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/41/024.JPG" class="type:primaryImage" alt="30mのダイビング。RICOH WG-6で撮影" /></p>
                <p>RICOH WG-6をスキューバダイビングで使っています。</p>
<p>WG-6はアウトドア向けのコンパクトカメラで<strong>水深20mまでの防水性能</strong>があります。<br><a href="https://www.ricoh-imaging.co.jp/japan/products/wg-6/spec/index.html" target="_blank" rel="noopener noreferrer" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">WG-6 - 製品仕様</a></p>
<p>今回の記事は防水カメラを性能以上の深度で使うどどうなるか書きます。</p>
<p>結論から言うと性能を超えた水深でもある程度までは割と使えました。</p>
<h2>スキューバダイビングと潜水深度</h2>
<p>スキューバダイビングのライセンス団体は色々ありますが基本的に初心者向けのライセンスと、中級者向けのライセンスがあります。<br>自分が取得したPADIという団体で言うと以下のようになっています。</p>
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 57.7636%;">体験ダイビングなど（無免許）</td>
<td style="width: 42.379%;">水深12mまで</td>
</tr>
<tr>
<td style="width: 57.7636%;">PADI オープン･ウォーター</td>
<td style="width: 42.379%;">水深18mまで</td>
</tr>
<tr>
<td style="width: 57.7636%;">PADI アドヴァンスド・オープン・ウォーター</td>
<td style="width: 42.379%;">水深30m-40mまで</td>
</tr>
</tbody>
</table>
<p>オープン・ウォーターまではWG-6で余裕なのですが、アドバンスドの免許を取得してダイビングを行う場合WG-6が耐えられる水深を超えている感じになります。</p>
<h2>余談: WG-6をダイビング向けに購入するのはおすすめしない</h2>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/41/DSC_1871.JPG" alt="RICOH WG-6" width="4528" height="3016" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/41/responsive/DSC_1871-xs.JPG 300w ,https://corkborg.github.io/media/posts/41/responsive/DSC_1871-sm.JPG 480w ,https://corkborg.github.io/media/posts/41/responsive/DSC_1871-md.JPG 749w ,https://corkborg.github.io/media/posts/41/responsive/DSC_1871-xl.JPG 1200w"></figure>
<p>ちなみに、この記事はスキューバダイビングでWG-6をおすすめする記事ではありません。<br>もしもスキューバダイビングでこのようなカメラの購入を検討している場合はOM SYSYEMのTG-7などがおすすめです。</p>
<p>TG-7本体は水深15mまでの防水性能ですが、ハウジング（防水ケース）を装着することで45mまで行けるようになります。</p>
<p>対して、WG-6はハウジングが存在しないので20mが限界です。先々スキューバダイビングが面白くなりアドバンスドの免許を取る可能性がある場合、いずれWG-6は使わなくなってしまうでしょう。</p>
<p>自分はダイビング以外の用途で以前からWG-6を持っていたのでスキューバダイビングに使用しました。<br>水中での写真の写りには満足しているのでハウジングが存在しないことが惜しまれます…。</p>
<h2>30m級のダイビングに持ち込んでわかったこと</h2>
<p>30m級だと意外と動きます。</p>
<p>ただ、不思議なことに気づきました。液晶のちょうど中央に小さな汚れのようなものが見えます。雰囲気としては液晶保護シートの中に空気が残ってしまったときのようなものです。</p>
<p>それでも写真が撮れるので使っていたのですが、これがなんなのかだんだん気づいてきました。</p>
<p>これは、液晶の保護パネルが水圧で押されて液晶パネルと接触してしまっているようでした。</p>
<p>結構な歪みなので30m級のダイビングで使い続けていると液晶の保護パネルが割れてしまうかもしれないです。</p>
<h2>40m級のダイビングに持ち込んでわかったこと</h2>
<p>30mでやめておけばよいのに、40mで使ってみるとどうなるか興味が湧きました。</p>
<p>使ってみると、やはり液晶の歪みがよりひどくなったのですが他の問題が発生しました。</p>
<p>カメラが起動しない…。</p>
<p>一瞬起動したり、水深が少し上がると使えるので壊れてはいなそうなので何が起きているのだろうと色々触っていると、電源ボタンを押した感触が薄いことに気づきました。</p>
<p>どうやら、水圧でボタンが押し込まれてしまって起動できなくなってしまったようでした。</p>
<p>WG-6を40mで使ったのはこの一回だけですが、その後も使えているので故障はしなかったようです。意外と頑丈ですね。</p>
<h2>余談：WG-6で撮れる写真について</h2>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://corkborg.github.io/media/posts/41/054-3.JPG" alt="RICOH WG-6で撮影したイソギンチャクの一種" width="5184" height="3456" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/41/responsive/054-3-xs.JPG 300w ,https://corkborg.github.io/media/posts/41/responsive/054-3-sm.JPG 480w ,https://corkborg.github.io/media/posts/41/responsive/054-3-md.JPG 749w ,https://corkborg.github.io/media/posts/41/responsive/054-3-xl.JPG 1200w"></figure>
<figure class="post__image post__image--center" ><figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/41/114-3.JPG" alt="RICOH WG-6で撮影したトラウツボ" width="5184" height="3456" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/41/responsive/114-3-xs.JPG 300w ,https://corkborg.github.io/media/posts/41/responsive/114-3-sm.JPG 480w ,https://corkborg.github.io/media/posts/41/responsive/114-3-md.JPG 749w ,https://corkborg.github.io/media/posts/41/responsive/114-3-xl.JPG 1200w"></figure>
<figcaption >ピントが微妙に合っていない…</figcaption>
</figure>
<p>WG-6を40mで使うのはあまり良くなさそうだったので、後日Canon S110とハウジングを中古で購入しました（セットで1万円程度で安かったので）。</p>
<p>40mでも問題なく写真が撮れました。ただ、取れた写真は微妙でWG-6などダイビングに注力しているカメラとの実力差を思い知らされました。</p>
<p>水深の問題を除くと、水中ライトが無くてもきれいな写真が撮れるWG-6は良いカメラだと思います。</p>
<h2>まとめ</h2>
<ul>
<li>メーカーの仕様上WG-6が耐えられる水深は20mまで</li>
<li>30m級のダイビングだと普通に撮影はできたが壊れる可能性が心配される</li>
<li>40m級のダイビングではWG-6は全然使えない（意外と壊れなかった）</li>
</ul>
<p>という感じでした。</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Google検索アルゴリズムの流出？と言われている物を実際に見てみた</title>
        <author>
            <name>ミズソバ</name>
        </author>
        <link href="https://corkborg.github.io/google-seo-leak-2024/"/>
        <id>https://corkborg.github.io/google-seo-leak-2024/</id>
        <media:content url="https://corkborg.github.io/media/posts/42/sukurinsiyotuto-2024-06-03-2.24.29.png" medium="image" />
            <category term="プログラミング"/>

        <updated>2024-06-02T15:35:47+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://corkborg.github.io/media/posts/42/sukurinsiyotuto-2024-06-03-2.24.29.png" alt="GoogleAPI PerDocDataのページ" />
                    最近（2024年5月）、Googleから検索に関連する内部APIのソースコードや内部文章がリークされたと話題ですね。 Google検索の検索順位はサイト運営する人には重要で、SEOなど検索アルゴリズムを逆手に取って検索順位をあげようと試みたりする場合があります。 その為、注目が集まっているのだと思います。 今回の流出を調べてみてわかったことは、Google検索の内部の重要なソースコードを何者かがリークしたと言うよりは、社内で使われているAPIの定義を誤って外部に見えるようしてしまった感じのようです。 Google側の温度感はそこまで高く無いように見えていて、流出した情報は未だに正式な手段で入手できる状況です。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://corkborg.github.io/media/posts/42/sukurinsiyotuto-2024-06-03-2.24.29.png" class="type:primaryImage" alt="GoogleAPI PerDocDataのページ" /></p>
                <p>最近（2024年5月）、Googleから検索に関連する内部APIのソースコードや内部文章がリークされたと話題ですね。</p>
<p>Google検索の検索順位はサイト運営する人には重要で、SEOなど検索アルゴリズムを逆手に取って検索順位をあげようと試みたりする場合があります。<br>その為、注目が集まっているのだと思います。</p>
<p>今回の流出を調べてみてわかったことは、Google検索の内部の重要なソースコードを何者かがリークしたと言うよりは、社内で使われているAPIの定義を誤って外部に見えるようしてしまった感じのようです。<br>Google側の温度感はそこまで高く無いように見えていて、流出した情報は未だに正式な手段で入手できる状況です。</p>
<p>そして、流出したものはあくまでも<strong>API</strong>についての文章であって、Google検索内部の仕組みについては依然不明なので、分かる事としてはGoogle内部のシステムの構造や、Googleの組織構造などくらいです。</p>
<h2>Google APIとは</h2>
<p>Googleでは顧客向けにAPIを公開していて、APIを使うことで顧客のシステムにGoogleの機能を利用する事ができるようになっています。</p>
<p>Googleはこの考え方を社内向けにも応用していて、Google内部の人も社内の機能を使いたいと考えたら、Google内部の向けのAPIを使用してその機能を利用するような仕組みになっているようです（こういう形態はマイクロサービスと言う概念と関係があります）。</p>
<p>つまり、Googleでは社外向けのAPIも社内向けのAPIも同一の仕組みで取り扱っていて、社外向けのAPIを抜粋して外部に公開する仕組みがあるようで、それらのフローで問題が起きたようです。</p>
<p><a href="https://github.com/googleapis/elixir-google-api">https://github.com/googleapis/elixir-google-api</a></p>
<h2>Googleが誤って公開してしまったもの</h2>
<p>今回誤って公開されてしまったものは、ContentWarehouseと呼ばれるものです。</p>
<p>Warehouseは直訳すると倉庫ですが、IT業界では一般的に大規模なデータを処理することに特化したデータベースの事を指します。</p>
<p>これらはコンテンツ情報（Webサイトなど）を処理する大規模なデータベースにアクセスするためのAPIのように見えます。</p>
<p>ただし、今回公開されてしまったものはContentWarehouse API内部のソースコード…ではなく、APIで取り扱うことが可能な<strong>データの構造（モデル）</strong>の定義です。</p>
<h2>実際のデータ</h2>
<p>こちらが、Googleが誤って公開してしまったGitHubのPRです。<br><a href="https://github.com/googleapis/elixir-google-api/pull/11021">https://github.com/googleapis/elixir-google-api/pull/11021</a></p>
<p>こちらが、誤って公開した物を削除するPRです。<br><a href="https://github.com/googleapis/elixir-google-api/pull/11378"></a><a href="https://github.com/googleapis/elixir-google-api/pull/11378">https://github.com/googleapis/elixir-google-api/pull/11378</a></p>
<p>GitHubでは一度誤って公開した情報を完全に消すにはファイルの削除だけでなく、Gitの履歴から削除するとともにリポジトリを作り直したりする必要があります。これらの対応をGoogleは行っていません。</p>
<p>削除する直前のコミットidは <code>e6a95f9335bf2fcb3cef77d99eecf3e0ca8d65c7</code>です。<br>Gitに詳しい方であれば上記IDをチェックアウトしてもらえば該当の定義を見ることができると思います。</p>
<h2>データ構造（モデル）の定義とは</h2>
<p>モデルというものはAPI間や機能間でデータをやり取りするために、転送する予定のデータの内容を事前に取り決めをしておくためのものです。</p>
<p>つまり、このAPIのモデルの定義を見るとGoogle検索がContentWarehouseにアクセスする際に送っている情報が推測できる可能性があります。</p>
<p>ただ、このようなデータ構造の定義書というのはいくつかの点で注意する必要があります。例を挙げると</p>
<ul>
<li>過去に使われていたものが互換性の問題で残されている</li>
<li>送っているけど内部では使われていない物</li>
<li>システムでは使う予定はないが記録として併記されていると嬉しい物</li>
<li>メソッド名やコメントが実態を表していない場合</li>
<li>開発版の可能性</li>
<li>データ構造が複数の機能に参照されていて片方には必要の無い情報（Google広告向けなど）</li>
</ul>
<p>これらは、どこの組織のシステムでも割とよくあることで特殊な事例ではありません。そのため、APIのドキュメントだけでは内部の動きを物語る確実な証拠にはならない感じです。</p>
<p>今回のAPIドキュメントに書いてある内容をそのまま鵜呑みにするのは良くないと思います。</p>
<h2>APIデータの見方</h2>
<p>ソースコードを直接見てもよいのですが該当のドキュメントはElixirというプログラミング言語で書かれていてExDocという機能でHTMLを生成できます。</p>
<p>Elixirをインストールした後に下記の様にコマンドを実行すると今回の件のHTMLドキュメントが生成されます。</p>
<pre>cd clients/content_warehouse/<br>mix deps.get<br>mix docs</pre>
<p>docsディレクトリにHTMLが生成されます。<br>index.htmlを開くとこんな感じです。</p>
<figure class="post__image"><img loading="lazy"  src="https://corkborg.github.io/media/posts/42//sukurinsiyotuto-2024-06-02-14.03.53.png" alt="" width="1846" height="670" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://corkborg.github.io/media/posts/42//responsive/sukurinsiyotuto-2024-06-02-14.03.53-xs.png 300w ,https://corkborg.github.io/media/posts/42//responsive/sukurinsiyotuto-2024-06-02-14.03.53-sm.png 480w ,https://corkborg.github.io/media/posts/42//responsive/sukurinsiyotuto-2024-06-02-14.03.53-md.png 749w ,https://corkborg.github.io/media/posts/42//responsive/sukurinsiyotuto-2024-06-02-14.03.53-xl.png 1200w"></figure>
<p>PerDocDataというデータ構造がGoogle検索のAPIリクエストを集約している物のように見えるのでそこから見ていくと面白いかもしれません。</p>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
